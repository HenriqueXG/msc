"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_syntax_highlighter_1 = require("react-syntax-highlighter");
const vs_1 = __importDefault(require("react-syntax-highlighter/dist/cjs/styles/prism/vs"));
const xonokai_1 = __importDefault(require("react-syntax-highlighter/dist/cjs/styles/prism/xonokai"));
const customStyle = {
    padding: "10px 0px 10px 10px",
    margin: "0px",
    backgroundColor: "var(--cm-background, #fafafa)",
    border: "none"
};
const Highlighter = (props) => {
    let language = props.language;
    if (language === "ipython") {
        language = "python";
    }
    else if (language === "text/x-scala") {
        // Adjust for the scala codemirror type
        language = "scala";
    }
    else if (language.startsWith("text/x-")) {
        // Strip off the language from the mimetype
        language = language.slice("text/x-".length);
    }
    return (React.createElement(react_syntax_highlighter_1.Prism, { style: props.theme === "light" ? vs_1.default : xonokai_1.default, language: language, className: props.className, customStyle: customStyle }, props.children));
};
Highlighter.defaultProps = {
    theme: "light",
    language: "text",
    children: "",
    className: "input"
};
exports.default = Highlighter;
